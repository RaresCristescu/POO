#include <iostream>
#include <string.h>
#include<fstream>
using namespace std;
class Nr_Natural_Mare;
class Vector
{

    int *a;
    public:
    Vector(int *b=NULL){a=b;}//parametrizare
    Vector(const Vector &v){a=v.a;}//copiere
    friend class Nr_Natural_Mare;
    friend istream &operator >>(istream&,Nr_Natural_Mare&);
    friend ostream &operator <<(ostream&,Nr_Natural_Mare&);
    friend Nr_Natural_Mare operator +(Nr_Natural_Mare ,Nr_Natural_Mare );
    friend int operator >(Nr_Natural_Mare ,Nr_Natural_Mare );
    friend Nr_Natural_Mare operator -(Nr_Natural_Mare ,Nr_Natural_Mare );
    friend Nr_Natural_Mare operator *(Nr_Natural_Mare ,int);
    friend Nr_Natural_Mare operator *(Nr_Natural_Mare ,Nr_Natural_Mare );
};
class Nr_Natural_Mare
{
    Vector v;
    int nr_cif;
    public:
    virtual void citire()
    {
    char x[1000];
    cin>>x;
    nr_cif=strlen(x);
    v.a=new int [nr_cif];
    for(int i=0;i<nr_cif;i++)
        v.a[i]=x[i]-'0';
    }
    Nr_Natural_Mare(){nr_cif=0;v.a=new int [1];v.a[0]=0;}
    Nr_Natural_Mare(int n){nr_cif=n;v.a=new int [n];}
    Nr_Natural_Mare(const Nr_Natural_Mare & w)
    {
        nr_cif=w.nr_cif;
        v.a=new int[nr_cif];
        for(int i=0;i<nr_cif;i++)v.a[i]=w.v.a[i];
    }
    ~Nr_Natural_Mare(){delete []v.a;}
    friend istream &operator >>(istream&,Nr_Natural_Mare&);
    friend ostream &operator <<(ostream&,Nr_Natural_Mare&);
    friend Nr_Natural_Mare operator +(Nr_Natural_Mare ,Nr_Natural_Mare );
    friend Nr_Natural_Mare operator -(Nr_Natural_Mare ,Nr_Natural_Mare );
    friend Nr_Natural_Mare operator *(Nr_Natural_Mare ,Nr_Natural_Mare );
    friend Nr_Natural_Mare operator *(Nr_Natural_Mare ,int);
    friend int operator >(Nr_Natural_Mare ,Nr_Natural_Mare );
    Nr_Natural_Mare &operator =(const Nr_Natural_Mare&);

};
istream &operator>>(istream & in, Nr_Natural_Mare& p)
{
    char v[1000];
    in>>v;
    p.nr_cif=strlen(v);
    p.v.a=new int [p.nr_cif];
    for(int i=0;i<p.nr_cif;i++)
        p.v.a[i]=v[i]-'0';
    return in;
}
ostream &operator <<(ostream& out,Nr_Natural_Mare& p)
{
    for(int i=0;i<p.nr_cif;i++)
        out<<p.v.a[i];
    return out;
}
Nr_Natural_Mare operator +(Nr_Natural_Mare n1,Nr_Natural_Mare n2)
{
    /*int d=0,i,m,k,j,c=0;
    Nr_Natural_Mare n3;
    if(n1>n2)m=n1.nr_cif;
    else m=n2.nr_cif;
    n1.v.a[n1.nr_cif]=0;
    n2.v.a[n2.nr_cif]=0;
    if((n1.v.a[0]+n2.v.a[0])>9)d=1;//conditie pentru marirea numarului de cifre in numar
    n3.v.a=new int [m+d];//////////NU DADUSEM MEMORIE SI NU MERGEA ATENTIE
    for(i=m+d-1,j=n1.nr_cif-1,k=n2.nr_cif-1;i>=0;i--,j--,k--)
    {
        if(m+d-n1.nr_cif>i)j=n1.nr_cif;
        if(m+d-n2.nr_cif>i)k=n2.nr_cif;
        n3.v.a[i]=c+n1.v.a[j]+n2.v.a[k];
        if(n3.v.a[i]>9)
        {
            n3.v.a[i]=n3.v.a[i]%10;
            c=1;
        }
        else c=0;
    }
    n3.nr_cif=m+d;
    return n3;*/
    Nr_Natural_Mare n3;
    if(n2>n1){n3=n1; n1=n2; n2=n3;}
    n3.nr_cif=n1.nr_cif;
    int C[n3.nr_cif+1]={0},d=0,i,k,c=0;
    n2.v.a[n2.nr_cif]=0;
    for(i=n3.nr_cif-1,k=n2.nr_cif-1;i>=0;i--,k--)
    {
        if(n3.nr_cif-n2.nr_cif>i)k=n2.nr_cif;
        C[i]=n1.v.a[i]+n2.v.a[k]+c;
        if(C[i]>9)//cazul 2-7
        {
            C[i]=C[i]%10;
            c=1;
        }
        else c=0;
    }
    if(c==1)d=1;
   // if(d==n3.nr_cif)d--;
    n3.nr_cif=n3.nr_cif+d;
    n3.v.a=new int [n3.nr_cif];
    for(i=n3.nr_cif-1;i>=0+d;i--)n3.v.a[i]=C[i-d];
    if(d==1)n3.v.a[0]=1;
    return n3;
}
int operator >(Nr_Natural_Mare n1,Nr_Natural_Mare n2)
{
    int i=0;
    if(n1.nr_cif>n2.nr_cif)return 1;
    else if(n2.nr_cif>n1.nr_cif) return 0;
    else
    {
        while(n1.v.a[i]==n2.v.a[i])i++;
        if(n1.v.a[i]>n2.v.a[i])return 1;
        else return 0;
    }
}
Nr_Natural_Mare operator -(Nr_Natural_Mare n1,Nr_Natural_Mare n2)//scadere cu rezultat in multimea numerelor naturale
{
    Nr_Natural_Mare n3;
    /*int C[1000]={0},d=0,i,j,k,c;
    if(n1>n2)n3.nr_cif=n1.nr_cif;
    else n3.nr_cif=n2.nr_cif;
    n1.v.a[n1.nr_cif]=0;
    n2.v.a[n2.nr_cif]=0;
    for(i=n3.nr_cif-1,j=n1.nr_cif-1,k=n2.nr_cif-1;i>=0;i--,j--,k--)
    {
        if(n3.nr_cif-n1.nr_cif>i)j=n1.nr_cif;
        if(n3.nr_cif-n2.nr_cif>i)k=n2.nr_cif;
        C[i]=n1.v.a[j]-n2.v.a[k];
        if(n2.v.a[j]>n1.v.a[k]||C[i]<0)//cazul 2-7
        {
            C[i]=C[i]+10;
            c=1;
            n1.v.a[j-1]-=c;
            c=0;
        }
    }
    for(i=0;i<n3.nr_cif;i++)if(C[i]!=0)break;
    else d++;
    if(d==n3.nr_cif)d--;
    n3.nr_cif=n3.nr_cif-d;
    n3.v.a=new int [n3.nr_cif];
    for(i=n3.nr_cif-1;i>=0;i--)n3.v.a[i]=C[i+d];
    return n3;
    */
    //int C[1000]={0},d=0,i,k,c=0;
    if(n2>n1){n3=n1; n1=n2; n2=n3;}
    n3.nr_cif=n1.nr_cif;
    int C[n3.nr_cif]={0},d=0,i,k,c=0;
    n2.v.a[n2.nr_cif]=0;
    for(i=n3.nr_cif-1,k=n2.nr_cif-1;i>=0;i--,k--)
    {
        if(n1.nr_cif-n2.nr_cif>i)k=n2.nr_cif;
        C[i]=n1.v.a[i]-n2.v.a[k]-c;
       // cout<<"a ";
        if(n2.v.a[k]>n1.v.a[i]||C[i]<0)//cazul 2-7
        {
            C[i]=C[i]+10;
            c=1;
            //cout<<"b ";
        }
        else c=0;
       // cout<<"c ";
    }
    for(i=0;i<n3.nr_cif;i++)if(C[i]!=0)break;
    else d++;
    if(d==n3.nr_cif)d--;
    n3.nr_cif=n3.nr_cif-d;
    n3.v.a=new int [n3.nr_cif];
    for(i=n3.nr_cif-1;i>=0;i--)n3.v.a[i]=C[i+d];
    return n3;
}
Nr_Natural_Mare operator *(Nr_Natural_Mare n1,int x)//Inmultirea unui numar natural marecu o cifra sau 10
{
    int i,j=0,C[n1.nr_cif+10]={0},c=0;
    if(x==10)
    {
        Nr_Natural_Mare n3;
        n3.nr_cif=n1.nr_cif+1;
        n3.v.a=new int [n3.nr_cif];
        for(i=n3.nr_cif-2;i>=0;i--)
        n3.v.a[i]=n1.v.a[i];
        n3.v.a[n3.nr_cif-1]=0;
        return n3;
    }
    if(x==0)
    {
        Nr_Natural_Mare n3;
        n3.nr_cif=1;
        n3.v.a=new int [1];
        n3.v.a[0]=0;
        return n3;
    }
    for(i=n1.nr_cif-1;i>=0;i--,j++)
    {
        C[j]=C[j]+n1.v.a[i]*x+c;
        if(C[j]>9)
        {
            c=C[j]/10;
            C[j]=C[j]%10;
        }
        else c=0;
        if(i==0&&c!=0)C[++j]+=c;
    }
    Nr_Natural_Mare n3;
    n3.nr_cif=j;
    n3.v.a=new int [j];
    for(i=n3.nr_cif-1,j=0;i>=0;i--,j++)
        n3.v.a[i]=C[j];
    return n3;
}
Nr_Natural_Mare operator *(Nr_Natural_Mare n1,Nr_Natural_Mare n2)
{
    int ok=0,cp=0;
    Nr_Natural_Mare nf,nc,np;
    for(int i=n1.nr_cif-1;i>=0;i--)
    {

        nc=n2*n1.v.a[i];
        cout<<nc<<" nc "<<endl;
        cp=ok;
        while(cp>0){nc=nc*10;cp--;}
        cout<<nc<<" nc marit "<<endl;
        np=nc+nf;
        nf=np;
        cout<<nf<<" nf ok "<<ok<<endl;
        ok++;
    }
    //cout<<endl<<endl<<nf<<endl;
    return nf;
}
Nr_Natural_Mare &Nr_Natural_Mare::operator =(const Nr_Natural_Mare &n1)//atribuire vector unui vector
{
    nr_cif=n1.nr_cif;
    v.a=new int [nr_cif];
    for(int i=0;i<nr_cif;i++)
    v.a[i]=n1.v.a[i];
    return *this;
}
class Numar_Intreg_mare: Nr_Natural_Mare
{
    char semn;
    public:
        void citire()
        {
            cin>>semn;
            cin>>(Nr_Natural_Mare&)*this;
        }
    Numar_Intreg_mare(char s='+'):Nr_Natural_Mare(0){semn=s;}
    Numar_Intreg_mare(const Numar_Intreg_mare & w):Nr_Natural_Mare(w)
    {
        semn=w.semn;
    }
    ~Numar_Intreg_mare(){}
    Numar_Intreg_mare &operator =(const Numar_Intreg_mare&);
    friend istream &operator >>(istream&,Numar_Intreg_mare&);
    friend ostream &operator <<(ostream&,Numar_Intreg_mare&);
    friend Numar_Intreg_mare operator +(Numar_Intreg_mare ,Numar_Intreg_mare );
    friend Numar_Intreg_mare operator -(Numar_Intreg_mare ,Numar_Intreg_mare );
    friend Numar_Intreg_mare operator *(Numar_Intreg_mare ,Numar_Intreg_mare );
};
Numar_Intreg_mare &Numar_Intreg_mare::operator =(const Numar_Intreg_mare &n1)
{
    semn=n1.semn;
    Nr_Natural_Mare::operator=(n1);
    return *this;
}

istream &operator >>(istream&in,Numar_Intreg_mare&n1)
{
    in>>n1.semn>>(Nr_Natural_Mare&)n1;
    /*in>>n1.semn;
    ((Nr_Natural_Mare&)n1).citire();*/
    return in;
}
ostream &operator <<(ostream&out,Numar_Intreg_mare&n1)
{
    out<<n1.semn<<(Nr_Natural_Mare&)n1;
    return out;
}
Numar_Intreg_mare operator +(Numar_Intreg_mare n1,Numar_Intreg_mare n2)
{
    Numar_Intreg_mare n3;
    if(n1.semn!=n2.semn)
    {
        (Nr_Natural_Mare&)n3=(Nr_Natural_Mare&)n1-(Nr_Natural_Mare&)n2;
        if((Nr_Natural_Mare&)n1>(Nr_Natural_Mare&)n2)n3.semn=n1.semn;
        else n3.semn=n2.semn;
        return n3;

    }
    else
    {
        (Nr_Natural_Mare&)n3=(Nr_Natural_Mare&)n1+(Nr_Natural_Mare&)n2;
        n3.semn=n1.semn;
        return n3;
    }
}
Numar_Intreg_mare operator -(Numar_Intreg_mare n1,Numar_Intreg_mare n2)
{
    Numar_Intreg_mare n3;
    if(n1.semn!=n2.semn)
    {
        (Nr_Natural_Mare&)n3=(Nr_Natural_Mare&)n1+(Nr_Natural_Mare&)n2;
        n3.semn=n1.semn;
        return n3;
    }
    else
    {
        (Nr_Natural_Mare&)n3=(Nr_Natural_Mare&)n2-(Nr_Natural_Mare&)n1;
        if(n1.semn=='+'){
        if((Nr_Natural_Mare&)n1>(Nr_Natural_Mare&)n2)n3.semn='+';
        else n3.semn='-';}
        else{
        if((Nr_Natural_Mare&)n2>(Nr_Natural_Mare&)n1)n3.semn='+';
        else n3.semn='-';
        }
        return n3;
    }
}
Numar_Intreg_mare operator *(Numar_Intreg_mare n1 ,Numar_Intreg_mare n2)
{
    Numar_Intreg_mare n3;
    (Nr_Natural_Mare&)n3=(Nr_Natural_Mare&)n1*(Nr_Natural_Mare&)n2;
    if(n1.semn!=n2.semn)n3.semn='-';
    else n3.semn='+';
    return n3;
}
class lista
{
    Numar_Intreg_mare *nr;
    int n;
    public:
    void citire(){
        cin>> n;
        nr=new Numar_Intreg_mare[n];
    for(int i=0;i<n;i++)
        nr[i].citire();
    }
    lista &operator =(const lista&);
    friend istream &operator >>(istream&,lista&);
    friend ostream &operator <<(ostream&,lista&);
};
istream &operator >>(istream&in,lista& l)
{
    in>>l.n;
    l.nr=new Numar_Intreg_mare [l.n];
    for( int i=0;i<l.n;i++)
    cin>>l.nr[i];
    return in;
}
ostream &operator <<(ostream& out,lista& l)
{
    for(int i=0;i<l.n;i++)
    {
        cout<<l.nr[i];
        out<<endl;
    }
    return out;
}
lista &lista::operator =(const lista &l)
{
    n=l.n;
    //Numar_Intreg_mare::operator=(l.nr);
    nr=l.nr;
    return *this;
}
/*class obiect
{
    int id;
    string denumire;
public:
    obiect &operator =(const obiect&);

};
obiect &obiect::operator=(const obiect &ob)
{
    id=ob.id;
    strcpy(denumire,ob.denumire);
    return *this;
}
class obiect_actualizat: obiect
{
    string data;
public:
    obiect_actualizat &operator =(const obiect_actualizat&);
};
obiect_actualizat &obiect_actualizat::operator =(const obiect_actualizat& ob)
{
    strcpy(data,ob.data);
    obiect::operator=(ob);
    return *this;
}
class obiect_personalizat:public obiect
{
    char* autor_proiect;
public:
    obiect_personalizat &operator =(const obiect_personalizat&);
};
obiect_personalizat &obiect_personalizat::operator =(const obiect_personalizat&ob)
{
    autor_proiect=new char [strlen(ob.autor_proiect)]
    strcpy(autor_proiect,ob.autor_proiect);
    obiect::operator=(ob);
    return *this;
}
class proiect:public obiect_actualizat,public obiect_personalizat
{

};
class hibrid: public Nr_Natural_Mare,public proiect
{

};*/
class farmacie_abstracta
{
    string denumire;
public:
    //virtual int calcul_venit()=0;
    farmacie_abstracta(){denumire="";}
    farmacie_abstracta(string s){denumire=s;}
    ~farmacie_abstracta(){}
    farmacie_abstracta(const farmacie_abstracta & w)
    {
        denumire=w.denumire;
    }
    farmacie_abstracta  &operator =(const farmacie_abstracta&);
    friend ifstream &operator >>(ifstream&,farmacie_abstracta&);
    virtual void afisare(){cout<<denumire;}
};
farmacie_abstracta &farmacie_abstracta::operator=(const farmacie_abstracta&f)
{
    denumire=f.denumire;
    return *this;
}
ifstream &operator >>(ifstream&in ,farmacie_abstracta&f)
{
    in>>f.denumire;
    return in;
}
class farmacie_offline:public farmacie_abstracta
{
    int nr_luni;
    double *cifra_afaceri_luna;
public:
    farmacie_offline():farmacie_abstracta(){nr_luni=0;cifra_afaceri_luna=NULL;}
    farmacie_offline(int n):farmacie_abstracta(){nr_luni=n;}
    ~farmacie_offline(){delete []cifra_afaceri_luna;}
    farmacie_offline(const farmacie_offline & w):farmacie_abstracta(w)
    {
        nr_luni=w.nr_luni;
        cifra_afaceri_luna=w.cifra_afaceri_luna;
    }
    farmacie_offline  &operator =(const farmacie_offline&);
    friend ifstream &operator >>(ifstream&,farmacie_offline&);
    void afisare(){((farmacie_abstracta&)*this).afisare();
    cout<<(*this).nr_luni;
    for(int i=0;i<(*this).nr_luni;i++)
    cout<<(*this).cifra_afaceri_luna[i];}
};
farmacie_offline &farmacie_offline::operator=(const farmacie_offline& f)
{
    nr_luni=f.nr_luni;
    cifra_afaceri_luna=f.cifra_afaceri_luna;
    farmacie_abstracta::operator=(f);
    return *this;
}
ifstream &operator >>(ifstream&in,farmacie_offline&f)
{
    in>>(farmacie_abstracta&)f;
    in>>f.nr_luni;
    f.cifra_afaceri_luna=new double [f.nr_luni];
    for(int i=0;i<f.nr_luni;i++)
        in>>f.cifra_afaceri_luna[i];
    return in;
}
class farmacie_online:public farmacie_abstracta
{
    int nr_luni;
    double *cifra_afaceri_luna;
    char *adresa_web;
    int nr_vizitatori;
public:
    farmacie_online():farmacie_abstracta(){nr_luni=0;cifra_afaceri_luna=NULL;adresa_web=NULL;nr_vizitatori=0;}
    farmacie_online(int n):farmacie_abstracta(){nr_luni=0;cifra_afaceri_luna=NULL;nr_vizitatori=n;adresa_web=NULL;}
    ~farmacie_online(){delete []adresa_web;delete []cifra_afaceri_luna;}
    farmacie_online(const farmacie_online & w):farmacie_abstracta(w)
    {
        nr_luni=w.nr_luni;
        cifra_afaceri_luna=w.cifra_afaceri_luna;
        nr_vizitatori=w.nr_vizitatori;
        adresa_web=new char [strlen(w.adresa_web)];
        strcpy(adresa_web,w.adresa_web);
    }
    farmacie_online  &operator =(const farmacie_online&);
    friend ifstream &operator >>(ifstream&,farmacie_online&);
    void afisare(){((farmacie_abstracta&)*this).afisare();
    cout<<(*this).nr_luni;
    for(int i=0;i<(*this).nr_luni;i++)
    cout<<(*this).cifra_afaceri_luna[i];
    cout<<(*this).adresa_web;
    cout<<(*this).nr_vizitatori;}
};
farmacie_online &farmacie_online::operator=(const farmacie_online& f)
{
    nr_luni=f.nr_luni;
    cifra_afaceri_luna=f.cifra_afaceri_luna;
    nr_vizitatori=f.nr_vizitatori;
    adresa_web=new char [strlen(f.adresa_web)];
    strcpy(adresa_web,f.adresa_web);
    farmacie_abstracta::operator=(f);
    return *this;
}
ifstream &operator >>(ifstream&in,farmacie_online&f)
{
    char c[100];
    in>>(farmacie_abstracta&)f;
    in>>c;
    f.adresa_web=new char [strlen(c)];
    strcpy(f.adresa_web,c);
    in>>f.nr_vizitatori;
    return in;
}
class farmacie_dubla_specializare: public farmacie_offline,public farmacie_online
{
    int nr_angajati;
public:
    farmacie_dubla_specializare():farmacie_offline(),farmacie_online(){nr_angajati=0;}
    farmacie_dubla_specializare(int n):farmacie_offline(),farmacie_online(){nr_angajati=n;}
    ~farmacie_dubla_specializare(){}
    farmacie_dubla_specializare(const farmacie_dubla_specializare & w):farmacie_offline(w),farmacie_online(w)
    {
        nr_angajati=w.nr_angajati;
    }
    farmacie_dubla_specializare  &operator =(const farmacie_dubla_specializare&);
    friend ifstream &operator >>(ifstream&,farmacie_dubla_specializare&);
}
farmacie_dubla_specializare &farmacie_dubla_specializare::operator=(const farmacie_dubla_specializare& f)
{
    nr_angajati=f.nr_angajati;
    farmacie_offline::operator=(f);
    farmacie_online::operator=(f);
    return *this;
}
ifstream &operator >>(ifstream&in,farmacie_dubla_specializare&f)
    {
        in>>(farmacie_online&)f;
        in>>(farmacie_offline&)f;
        in>>f.nr_angajati;
        return in;
    }
int main()
{
    Nr_Natural_Mare n1,n2,n3;
    Numar_Intreg_mare m1,m2,m3;
    farmacie_dubla_specializare f1;
    cin>>f1;
    //cin>>m1>>m2;
    //m3=m1+m2;
    //cout<<m3;
    //m1.citire();
   // m2.citire();
    //m3=m1*m2;
    //cout<<m3;
    //lista l,b;
    //cin>>l;
    //l.citire();
    //b=l;
    //cout<<b;
    //cin>>n1>>n2;
    //n3=n1*n2;
    //cout<<n3;
    //    cin>>v;
   // cout<<v;
    return 0;
}
